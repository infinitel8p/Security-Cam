"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9935],{2034:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>l});var r=i(4848),s=i(8453);const t={sidebar_position:2,description:"Step 2: Setup the WiFi Access Point"},a="WiFi Setup",d={id:"setup/wifi",title:"WiFi Setup",description:"Step 2: Setup the WiFi Access Point",source:"@site/docs/setup/wifi.mdx",sourceDirName:"setup",slug:"/setup/wifi",permalink:"/Security-Cam/docs/setup/wifi",draft:!1,unlisted:!1,editUrl:"https://github.com/infinitel8p/Security-Cam/edit/main/documentation/docs/setup/wifi.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Step 2: Setup the WiFi Access Point"},sidebar:"tutorialSidebar",previous:{title:"Hardware Setup",permalink:"/Security-Cam/docs/setup/hardware"},next:{title:"Bluetooth & Script Setup",permalink:"/Security-Cam/docs/setup/script"}},o={},l=[{value:"Find your Raspberry&#39;s MAC address with <code>iw dev</code>:",id:"find-your-raspberrys-mac-address-with-iw-dev",level:3},{value:"Allocate a device for the AP:",id:"allocate-a-device-for-the-ap",level:3},{value:"Install <code>Dnsmasq</code> and <code>Hostapd</code>:",id:"install-dnsmasq-and-hostapd",level:3},{value:"Configure <code>Dnsmasq</code>:",id:"configure-dnsmasq",level:3},{value:"Backup the original <code>dnsmasq</code> configuration:",id:"backup-the-original-dnsmasq-configuration",level:4},{value:"Create a new <code>dnsmasq</code> configuration:",id:"create-a-new-dnsmasq-configuration",level:4},{value:"Add the following content:",id:"add-the-following-content",level:4},{value:"Configure <code>Hostapd</code>:",id:"configure-hostapd",level:3},{value:"Open the configuration file:",id:"open-the-configuration-file",level:4},{value:"Add the following content:",id:"add-the-following-content-1",level:4},{value:"Specify where <code>hostapd</code> should find its configuration:",id:"specify-where-hostapd-should-find-its-configuration",level:4},{value:"Modify <code>wpa_supplicant</code>:",id:"modify-wpa_supplicant",level:3},{value:"Open the configuration file:",id:"open-the-configuration-file-1",level:4},{value:"Add the following content (if it doesn&#39;t exist already):",id:"add-the-following-content-if-it-doesnt-exist-already",level:4},{value:"Modify <code>/etc/network/interfaces</code> to support the new AP",id:"modify-etcnetworkinterfaces-to-support-the-new-ap",level:3},{value:"Open the configuration file:",id:"open-the-configuration-file-2",level:4},{value:"Add the following content:",id:"add-the-following-content-2",level:4},{value:"Start both interfaces:",id:"start-both-interfaces",level:3},{value:"Check the interfaces:",id:"check-the-interfaces",level:3},{value:"Bridge traffic between AP and Client side",id:"bridge-traffic-between-ap-and-client-side",level:3},{value:"Enbale ip-forwarding:",id:"enbale-ip-forwarding",level:4},{value:"Add iptables rules:",id:"add-iptables-rules",level:4},{value:"Restart <code>dnsmasq</code>:",id:"restart-dnsmasq",level:4},{value:"Automate the workaround:",id:"automate-the-workaround",level:3},{value:"Create a new file:",id:"create-a-new-file",level:4},{value:"Add the following content:",id:"add-the-following-content-3",level:4},{value:"Make the script executable:",id:"make-the-script-executable",level:4},{value:"Add a cronjob to run the script on boot:",id:"add-a-cronjob-to-run-the-script-on-boot",level:4}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"wifi-setup",children:"WiFi Setup"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h3,{id:"find-your-raspberrys-mac-address-with-iw-dev",children:["Find your Raspberry's MAC address with ",(0,r.jsx)(n.code,{children:"iw dev"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pi@raspberrypizero2:~ $ iw dev\r\nphy#0\r\n    Unnamed/non-netdev interface\r\n            wdev 0x2\r\n            addr ba:27:xx:xx:xx:xx\r\n            type P2P-device\r\n            txpower 31.00 dBm\r\n    Interface wlan0\r\n            ifindex 2\r\n            wdev 0x1\r\n            addr b8:27:xx:xx:xx:xx\r\n            ssid FRITZ!Box 0420\r\n            type managed\r\n            channel 1 (2412 MHz), width: 20 MHz, center1: 2412 MHz\r\n            txpower 31.00 dBm\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The MAC address of the ",(0,r.jsx)(n.code,{children:"wlan0"})," interface is ",(0,r.jsx)(n.code,{children:"b8:27:xx:xx:xx:xx"})," in this case.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Note: Remember the channel number (1 in this case) for later."})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h3,{id:"allocate-a-device-for-the-ap",children:"Allocate a device for the AP:"}),"\n",(0,r.jsxs)(n.p,{children:["This will create a new interface called ",(0,r.jsx)(n.code,{children:"ap0"})," with the same MAC address as ",(0,r.jsx)(n.code,{children:"wlan0"}),". ",(0,r.jsx)(n.code,{children:"ap0"})," will then be the interface used for the AP."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/udev/rules.d/70-persistent-net.rules\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Add the following lines and ",(0,r.jsx)(n.strong,{children:"replace your MAC address"})," accordingly:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'SUBSYSTEM=="ieee80211", ACTION=="add|change", ATTR{macaddress}=="b8:27:xx:xx:xx:xx", KERNEL=="phy0", \\\r\nRUN+="/sbin/iw phy phy0 interface add ap0 type __ap", \\\r\nRUN+="/bin/ip link set ap0 address b8:27:xx:xx:xx:xx"\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h3,{id:"install-dnsmasq-and-hostapd",children:["Install ",(0,r.jsx)(n.code,{children:"Dnsmasq"})," and ",(0,r.jsx)(n.code,{children:"Hostapd"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt-get update\r\nsudo apt-get upgrade #Optional\r\nsudo apt-get install dnsmasq hostapd\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h3,{id:"configure-dnsmasq",children:["Configure ",(0,r.jsx)(n.code,{children:"Dnsmasq"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h4,{id:"backup-the-original-dnsmasq-configuration",children:["Backup the original ",(0,r.jsx)(n.code,{children:"dnsmasq"})," configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo cp /etc/dnsmasq.conf /etc/dnsmasq.conf.orig\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h4,{id:"create-a-new-dnsmasq-configuration",children:["Create a new ",(0,r.jsx)(n.code,{children:"dnsmasq"})," configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/dnsmasq.conf\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"add-the-following-content",children:"Add the following content:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-conf",children:"interface=lo,ap0\r\nno-dhcp-interface=lo,wlan0\r\nbind-interfaces\r\nserver=8.8.8.8\r\ndomain-needed\r\nbogus-priv\r\ndhcp-range=192.168.10.50,192.168.10.150,12h\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h3,{id:"configure-hostapd",children:["Configure ",(0,r.jsx)(n.code,{children:"Hostapd"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"open-the-configuration-file",children:"Open the configuration file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/hostapd/hostapd.conf\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"add-the-following-content-1",children:"Add the following content:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-conf",children:"ctrl_interface=/var/run/hostapd\r\nctrl_interface_group=0\r\ninterface=ap0\r\ndriver=nl80211\r\nssid=DevAccessPoint\r\nhw_mode=g\r\nchannel=1\r\nwmm_enabled=0\r\nmacaddr_acl=0\r\nauth_algs=1\r\nwpa=2\r\nwpa_passphrase=YourPassPhraseHere\r\nwpa_key_mgmt=WPA-PSK\r\nwpa_pairwise=TKIP CCMP\r\nrsn_pairwise=CCMP\n"})}),"\n",(0,r.jsx)(n.p,{children:"Before you save, make sure to do these changes to the configuration:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Replace ",(0,r.jsx)(n.code,{children:"DevAccessPoint"})," and ",(0,r.jsx)(n.code,{children:"YourPassPhraseHere"})," with your desired values"]}),"\n",(0,r.jsxs)(n.li,{children:["Replace the ",(0,r.jsx)(n.code,{children:"channel"})," with the channel your ",(0,r.jsx)(n.code,{children:"wlan0"})," was running on (as reported by ",(0,r.jsx)(n.code,{children:"iw dev"})," in step 1)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h4,{id:"specify-where-hostapd-should-find-its-configuration",children:["Specify where ",(0,r.jsx)(n.code,{children:"hostapd"})," should find its configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/default/hostapd\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Find the line with ",(0,r.jsx)(n.code,{children:'#DAEMON_CONF=""'})," and replace ",(0,r.jsx)(n.em,{children:"(uncomment it or add it if it doesn't exist)"})," it with:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'DAEMON_CONF="/etc/hostapd/hostapd.conf"\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h3,{id:"modify-wpa_supplicant",children:["Modify ",(0,r.jsx)(n.code,{children:"wpa_supplicant"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"open-the-configuration-file-1",children:"Open the configuration file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"add-the-following-content-if-it-doesnt-exist-already",children:"Add the following content (if it doesn't exist already):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-conf",children:'country=US\r\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\r\nupdate_config=1\r\n\r\nnetwork={\r\n    ssid="YourSSID1"\r\n    psk="YourPassphrase1"\r\n    id_str="AP1"\r\n}\r\n\r\nnetwork={\r\n    ssid="YourSSID2"\r\n    psk="YourPassphrase2"\r\n    id_str="AP2"\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"YourSSID1"})," and ",(0,r.jsx)(n.code,{children:"YourPassphrase1"})," with your WiFi's SSID and passphrase.\r\nYou can add as many networks as you want, just make sure to increment the ",(0,r.jsx)(n.code,{children:"id_str"})," value for each network. You are are not required to keep ",(0,r.jsx)(n.code,{children:"YourSSID2"})," in the configuration if you only have one WiFi network you want to connect to.",(0,r.jsx)(n.br,{}),"\n","Change your country code accordingly."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h3,{id:"modify-etcnetworkinterfaces-to-support-the-new-ap",children:["Modify ",(0,r.jsx)(n.code,{children:"/etc/network/interfaces"})," to support the new AP"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"open-the-configuration-file-2",children:"Open the configuration file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/network/interfaces\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"add-the-following-content-2",children:"Add the following content:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-conf",children:"auto lo\r\nauto ap0\r\nauto wlan0\r\niface lo inet loopback\r\n\r\nallow-hotplug ap0\r\niface ap0 inet static\r\n    address 192.168.10.1\r\n    netmask 255.255.255.0\r\n    hostapd /etc/hostapd/hostapd.conf\r\n\r\nallow-hotplug wlan0\r\niface wlan0 inet manual\r\n    wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf\r\niface AP1 inet dhcp\r\niface AP2 inet dhcp\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h3,{id:"start-both-interfaces",children:"Start both interfaces:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo ifdown --force wlan0\r\nsudo ifdown --force ap0\r\nsudo ifup ap0\r\nsudo ifup wlan0\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["Note: It's crucial to copy and paste the entire block of commands above all at once. Executing them one by one will disconnect you from the Pi after disabling the interfaces, preventing you from re-enabling them immediately.\r\nIf your Raspberry Pi Zero W does not reconnect to your WiFi network at this point, unplug the power and plug it back in.",(0,r.jsx)(n.br,{}),"\n","On my setup it wouldn't connect even after a restart. I inserted the microSD card into my PC and recreated the ",(0,r.jsx)(n.code,{children:"wpa_supplier.conf"})," in the boot drive."]})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h3,{id:"check-the-interfaces",children:"Check the interfaces:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["SSH into the Pi again (Probably ",(0,r.jsx)(n.code,{children:"192.168.10.1"})," as is [7.2]) and check the interfaces:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pi@raspberrypi:~$ ip addr\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\r\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n    inet 127.0.0.1/8 scope host lo\r\n    valid_lft forever preferred_lft forever\r\n    inet6 ::1/128 scope host\r\n    valid_lft forever preferred_lft forever\r\n2: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\r\n    link/ether b8:27:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\r\n    inet 192.168.178.102/24 brd 192.168.178.255 scope global dynamic noprefixroute wlan0\r\n    valid_lft 863907sec preferred_lft 755907sec\r\n    inet6 2a02:4500:4507:8d04:e2455:6452:6e45:2f66/64 scope global dynamic mngtmpaddr noprefixroute\r\n    valid_lft 7102sec preferred_lft 2496sec\r\n    inet6 fe45::4455:a1e3:45c9:5451/64 scope link\r\n    valid_lft forever preferred_lft forever\r\n3: ap0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\r\n    link/ether b8:27:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\r\n    inet 192.168.10.1/24 brd 192.168.10.255 scope global ap0\r\n    valid_lft forever preferred_lft forever\r\n    inet 169.254.165.183/16 brd 169.254.255.255 scope global noprefixroute ap0\r\n    valid_lft forever preferred_lft forever\r\n    inet6 fe45::7d45:45b8:b45:2f45/64 scope link\r\n    valid_lft forever preferred_lft forever\r\n    inet6 fe45::ba27:eb45:fe7c:3cea/64 scope link\r\n    valid_lft forever preferred_lft forever\n"})}),"\n","You should see both ",(0,r.jsx)(n.code,{children:"wlan0"})," and ",(0,r.jsx)(n.code,{children:"ap0"})," interfaces with their respective IP addresses.\r\nIf you scan for WiFi networks with your phone you should also see the ",(0,r.jsx)(n.code,{children:"DevAccessPoint"})," (or whatever you've called it) network."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h3,{id:"bridge-traffic-between-ap-and-client-side",children:"Bridge traffic between AP and Client side"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"enbale-ip-forwarding",children:"Enbale ip-forwarding:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo sysctl -w net.ipv4.ip_forward=1\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"add-iptables-rules",children:"Add iptables rules:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo iptables -t nat -A POSTROUTING -s 192.168.10.0/24 ! -d 192.168.10.0/24 -j MASQUERADE\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.h4,{id:"restart-dnsmasq",children:["Restart ",(0,r.jsx)(n.code,{children:"dnsmasq"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo systemctl restart dnsmasq\n"})}),"\n","Now you should be able to connect to the AP and use its internet connection to access the internet. (If you have a working internet connection on its client side)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h3,{id:"automate-the-workaround",children:"Automate the workaround:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"create-a-new-file",children:"Create a new file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo nano start-ap-managed-wifi.sh\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"add-the-following-content-3",children:"Add the following content:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\nLOGFILE="/var/log/pi_startup.log"\r\necho "[$(date)] Starting script. Sleeping 45 sec..." >> $LOGFILE\r\nsleep 45\r\necho "[$(date)] Starting execution" >> $LOGFILE\r\nsudo sysctl -w net.ipv4.ip_forward=1\r\necho "[$(date)] Enabled ip forwarding" >> $LOGFILE\r\nsudo iptables -t nat -A POSTROUTING -s 192.168.10.0/24 ! -d 192.168.10.0/24 -j MASQUERADE\r\necho "[$(date)] Modified iptables to set up NAT" >> $LOGFILE\r\nsudo systemctl restart dnsmasq\r\necho "[$(date)] Restarted dnsmasq" >> $LOGFILE\r\necho " " >> $LOGFILE\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"make-the-script-executable",children:"Make the script executable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo chmod +x start-ap-managed-wifi.sh\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h4,{id:"add-a-cronjob-to-run-the-script-on-boot",children:"Add a cronjob to run the script on boot:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo crontab -e\n"})}),"\n",(0,r.jsx)(n.p,{children:"Add the following line to the end of the file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"@reboot /home/pi/start-ap-managed-wifi.sh\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Continue to ",(0,r.jsx)(n.a,{href:"./script",children:"SCRIPT.md"})," to set up bluetooth and the script."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*Note:"})," These instructions are tested on Raspbian Buster.",(0,r.jsx)(n.br,{}),"\n","Shoutout to ",(0,r.jsx)(n.a,{href:"https://blog.thewalr.us/2017/09/26/raspberry-pi-zero-w-simultaneous-ap-and-managed-mode-wifi/",children:"TheWalrus"})," for the original instructions. A comment under the post pointed out that the instructions depend upon if-up and if-down system which is no longer used in Raspian Buster. You might want to visit the original post for more information.*"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"These instructions depend upon if-up and if-down system used by Raspbian Stretch version."}),"\n",(0,r.jsx)(n.p,{children:"But as of 2020, you would be using Raspbian Buster, which uses a different system, based on dhcpcd daemon. While it is technically possible to still get it working (because the ifup/ifdown system are still there), it is recommended to use systemd-networkd approach, which doesn't depend upon having to introduce udev hook."}),"\n",(0,r.jsxs)(n.p,{children:["The instructions are here: ",(0,r.jsx)(n.a,{href:"https://disq.us/url?url=https%3A%2F%2Fraspberrypi.stackexchange.com%2Fquestions%2F89803%2Faccess-point-as-wifi-router-repeater-optional-with-bridge%2F89804%2389804%3AtorAhAl318HVmaNbHEe6ej2YO6s&cuid=4278722",children:"https://raspberrypi.stackex..."})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var r=i(6540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);
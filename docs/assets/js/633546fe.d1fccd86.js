"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9935],{2034:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=r(4848),t=r(8453);const i={sidebar_position:2,description:"Step 2: Setup the WiFi Access Point"},o="WiFi Setup",a={id:"setup/wifi",title:"WiFi Setup",description:"Step 2: Setup the WiFi Access Point",source:"@site/docs/setup/wifi.mdx",sourceDirName:"setup",slug:"/setup/wifi",permalink:"/Security-Cam/docs/setup/wifi",draft:!1,unlisted:!1,editUrl:"https://github.com/infinitel8p/Security-Cam/edit/main/documentation/docs/setup/wifi.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Step 2: Setup the WiFi Access Point"},sidebar:"tutorialSidebar",previous:{title:"Hardware Setup",permalink:"/Security-Cam/docs/setup/hardware"},next:{title:"Bluetooth Setup",permalink:"/Security-Cam/docs/setup/script"}},d={},c=[{value:"Find your Raspberry&#39;s MAC address:",id:"find-your-raspberrys-mac-address",level:2},{value:"Allocate a device for the Access Point",id:"allocate-a-device-for-the-access-point",level:2},{value:"Install <code>Dnsmasq</code>, <code>Hostapd</code> and <code>Nftables</code>",id:"install-dnsmasq-hostapd-and-nftables",level:2},{value:"Configure <code>Dnsmasq</code>",id:"configure-dnsmasq",level:2},{value:"Configure <code>Hostapd</code>",id:"configure-hostapd",level:2},{value:"Modify the <code>wpa_supplicant</code> configuration",id:"modify-the-wpa_supplicant-configuration",level:2},{value:"Enable support for the new AP",id:"enable-support-for-the-new-ap",level:2},{value:"Modify <code>/etc/network/interfaces</code> to support the new AP",id:"modify-etcnetworkinterfaces-to-support-the-new-ap",level:3},{value:"Check the interfaces",id:"check-the-interfaces",level:3},{value:"Bridge traffic between AP and Client side",id:"bridge-traffic-between-ap-and-client-side",level:3},{value:"Automate the workaround",id:"automate-the-workaround",level:3}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"wifi-setup",children:"WiFi Setup"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will help you set up a WiFi Access Point on your Raspberry Pi."}),"\n",(0,s.jsx)(n.h2,{id:"find-your-raspberrys-mac-address",children:"Find your Raspberry's MAC address:"}),"\n",(0,s.jsx)(n.p,{children:"Enter the following command to find the MAC address of your Raspberry Pi's WiFi interface:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"iw dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should see an output similar to this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="iw dev output:"',children:"pi@securitycam:~ $ iw dev\r\nphy#0\r\n    Unnamed/non-netdev interface\r\n            wdev 0x2\r\n            addr ba:27:xx:xx:xx:xx\r\n            type P2P-device\r\n            txpower 31.00 dBm\r\n    Interface wlan0\r\n            ifindex 2\r\n            wdev 0x1\r\n            addr b8:27:xx:xx:xx:xx\r\n            ssid FRITZ!Box 420\r\n            type managed\r\n            channel 1 (2412 MHz), width: 20 MHz, center1: 2412 MHz\r\n            txpower 31.00 dBm\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The MAC address of the ",(0,s.jsx)(n.code,{children:"wlan0"})," interface is ",(0,s.jsx)(n.code,{children:"b8:27:xx:xx:xx:xx"})," in this case."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Remember this MAC address (write it down) and the channel number (",(0,s.jsx)(n.code,{children:"channel 1"})," in this case) for later."]})}),"\n",(0,s.jsx)(n.h2,{id:"allocate-a-device-for-the-access-point",children:"Allocate a device for the Access Point"}),"\n",(0,s.jsxs)(n.p,{children:["Create a new interface called ",(0,s.jsx)(n.code,{children:"ap0"})," with the same MAC address as ",(0,s.jsx)(n.code,{children:"wlan0"}),".",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"ap0"})," will then be the interface used for the Access Point."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/udev/rules.d/70-persistent-net.rules\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Add the following lines and ",(0,s.jsx)(n.strong,{children:"replace your MAC address"})," (!) accordingly:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'SUBSYSTEM=="ieee80211", ACTION=="add|change", ATTR{macaddress}=="REPLACEWITHMACADDRESS", KERNEL=="phy0", \\\r\nRUN+="/sbin/iw phy phy0 interface add ap0 type __ap", \\\r\nRUN+="/bin/ip link set ap0 address REPLACEWITHMACADDRESS"\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"install-dnsmasq-hostapd-and-nftables",children:["Install ",(0,s.jsx)(n.code,{children:"Dnsmasq"}),", ",(0,s.jsx)(n.code,{children:"Hostapd"})," and ",(0,s.jsx)(n.code,{children:"Nftables"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install dnsmasq hostapd nftables -y\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"configure-dnsmasq",children:["Configure ",(0,s.jsx)(n.code,{children:"Dnsmasq"})]}),"\n",(0,s.jsxs)(n.p,{children:["Backup the original and create a new ",(0,s.jsx)(n.code,{children:"dnsmasq"})," configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo cp /etc/dnsmasq.conf /etc/dnsmasq.conf.orig\r\nsudo sh -c 'echo \"interface=lo,ap0\r\nno-dhcp-interface=lo,wlan0\r\nbind-interfaces\r\nserver=8.8.8.8\r\nserver=1.1.1.1\r\ndomain-needed\r\nbogus-priv\r\ndhcp-range=192.168.10.50,192.168.10.150,12h\" > /etc/dnsmasq.conf'\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"configure-hostapd",children:["Configure ",(0,s.jsx)(n.code,{children:"Hostapd"})]}),"\n",(0,s.jsx)(n.p,{children:"Open the configuration file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/hostapd/hostapd.conf\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add the following content:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-conf",children:"ctrl_interface=/var/run/hostapd\r\nctrl_interface_group=0\r\ninterface=ap0\r\ndriver=nl80211\r\nssid=DevAccessPoint\r\nhw_mode=g\r\nchannel=1\r\nwmm_enabled=0\r\nmacaddr_acl=0\r\nauth_algs=1\r\nwpa=2\r\nwpa_passphrase=YourPassPhraseHere\r\nwpa_key_mgmt=WPA-PSK\r\nwpa_pairwise=TKIP CCMP\r\nrsn_pairwise=CCMP\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Before you save, make sure to do these changes to the configuration:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Replace ",(0,s.jsx)(n.code,{children:"DevAccessPoint"})," and ",(0,s.jsx)(n.code,{children:"YourPassPhraseHere"})," with your desired values"]}),"\n",(0,s.jsxs)(n.li,{children:["Replace the ",(0,s.jsx)(n.code,{children:"channel"})," with the channel your ",(0,s.jsx)(n.code,{children:"wlan0"})," was running on (as reported by ",(0,s.jsx)(n.code,{children:"iw dev"})," in step 1)"]}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["Now after having saved, we want to specify where ",(0,s.jsx)(n.code,{children:"hostapd"})," should find its configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'sudo sed -i \'s|^#DAEMON_CONF=""|DAEMON_CONF="/etc/hostapd/hostapd.conf"|\' /etc/default/hostapd\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"modify-the-wpa_supplicant-configuration",children:["Modify the ",(0,s.jsx)(n.code,{children:"wpa_supplicant"})," configuration"]}),"\n",(0,s.jsx)(n.p,{children:"Open the configuration file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add the following content if it's not already present:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-conf",children:'country=US\r\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\r\nupdate_config=1\r\n\r\nnetwork={\r\n    ssid="YourSSID1"\r\n    psk="YourPassphrase1"\r\n    id_str="AP1"\r\n}\r\n\r\nnetwork={\r\n    ssid="YourSSID2"\r\n    psk="YourPassphrase2"\r\n    id_str="AP2"\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Customize the configuration:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Replace ",(0,s.jsx)(n.code,{children:"YourSSID1"})," and ",(0,s.jsx)(n.code,{children:"YourPassphrase1"})," with your Wi-Fi network\u2019s SSID and passphrase (the network you want to connect to, not the one created in the previous step)."]}),"\n",(0,s.jsxs)(n.li,{children:["Update the ",(0,s.jsx)(n.code,{children:"country=US"})," line to reflect your country code."]}),"\n",(0,s.jsx)(n.li,{children:"If you only have one Wi-Fi network, remove the second network block."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["You can add multiple networks by duplicating the network block, incrementing the ",(0,s.jsx)(n.code,{children:"id_str"})," for each one. Only keep the blocks for the networks you plan to connect to."]})}),"\n",(0,s.jsx)(n.h2,{id:"enable-support-for-the-new-ap",children:"Enable support for the new AP"}),"\n",(0,s.jsxs)(n.h3,{id:"modify-etcnetworkinterfaces-to-support-the-new-ap",children:["Modify ",(0,s.jsx)(n.code,{children:"/etc/network/interfaces"})," to support the new AP"]}),"\n",(0,s.jsx)(n.p,{children:"Open the configuration file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/network/interfaces\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add the following content:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-conf",children:"auto lo\r\nauto ap0\r\nauto wlan0\r\niface lo inet loopback\r\n\r\nallow-hotplug ap0\r\niface ap0 inet static\r\n    address 192.168.10.1\r\n    netmask 255.255.255.0\r\n    hostapd /etc/hostapd/hostapd.conf\r\n\r\nallow-hotplug wlan0\r\niface wlan0 inet manual\r\n    wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf\r\niface AP1 inet dhcp\r\niface AP2 inet dhcp\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"iface AP2 inet dhcp"}),": Remove this line if you do not have a second network configured in wpa_supplicant.conf."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"iface AP1 inet dhcp"}),": Keep this line since it corresponds to the first network (SSID ",(0,s.jsx)(n.code,{children:"YourSSID1"})," in the ",(0,s.jsx)(n.code,{children:"wpa_supplicant.conf"}),")."]}),"\n"]})}),"\n",(0,s.jsx)(n.p,{children:"Start both interfaces:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo ifdown --force wlan0\r\nsudo ifdown --force ap0\r\nsudo ifup ap0\r\nsudo ifup wlan0\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["It's crucial to copy and paste the entire block of commands above all at once.",(0,s.jsx)(n.br,{}),"\n","Executing them one by one will disconnect you from the Pi after disabling the interfaces, preventing you from re-enabling them immediately.",(0,s.jsx)(n.br,{}),"\n","If your Raspberry Pi Zero 2 W does not reconnect to your WiFi network at this point wait a few more seconds, unplug the power and plug it back in."]})}),"\n",(0,s.jsx)(n.h3,{id:"check-the-interfaces",children:"Check the interfaces"}),"\n",(0,s.jsxs)(n.p,{children:["You should be able to see the ",(0,s.jsx)(n.code,{children:"DevAccessPoint"})," network on your device."]}),"\n",(0,s.jsxs)(n.p,{children:["SSH into the Pi again (either you connect to the ",(0,s.jsx)(n.code,{children:"DevAccessPoint"})," and ssh with ",(0,s.jsx)(n.code,{children:"ssh pi@192.168.10.1"})," as configured in ",(0,s.jsx)(n.a,{href:"#modify-etcnetworkinterfaces-to-support-the-new-ap",children:"here"})," or find the Raspberry Pi's new IP address in your router and ssh into it)."]}),"\n",(0,s.jsx)(n.p,{children:"Now check the interfaces:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pi@securitycam:~$ ip addr\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\r\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n    inet 127.0.0.1/8 scope host lo\r\n    valid_lft forever preferred_lft forever\r\n    inet6 ::1/128 scope host\r\n    valid_lft forever preferred_lft forever\r\n2: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\r\n    link/ether b8:27:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\r\n    inet 192.168.178.102/24 brd 192.168.178.255 scope global dynamic noprefixroute wlan0\r\n    valid_lft 863907sec preferred_lft 755907sec\r\n    inet6 2a02:4500:4507:8d04:e2455:6452:6e45:2f66/64 scope global dynamic mngtmpaddr noprefixroute\r\n    valid_lft 7102sec preferred_lft 2496sec\r\n    inet6 fe45::4455:a1e3:45c9:5451/64 scope link\r\n    valid_lft forever preferred_lft forever\r\n3: ap0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\r\n    link/ether b8:27:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\r\n    inet 192.168.10.1/24 brd 192.168.10.255 scope global ap0\r\n    valid_lft forever preferred_lft forever\r\n    inet 169.254.165.183/16 brd 169.254.255.255 scope global noprefixroute ap0\r\n    valid_lft forever preferred_lft forever\r\n    inet6 fe45::7d45:45b8:b45:2f45/64 scope link\r\n    valid_lft forever preferred_lft forever\r\n    inet6 fe45::ba27:eb45:fe7c:3cea/64 scope link\r\n    valid_lft forever preferred_lft forever\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You should see both ",(0,s.jsx)(n.code,{children:"wlan0"})," and ",(0,s.jsx)(n.code,{children:"ap0"})," interfaces with their respective IP addresses."]}),"\n",(0,s.jsx)(n.h3,{id:"bridge-traffic-between-ap-and-client-side",children:"Bridge traffic between AP and Client side"}),"\n",(0,s.jsx)(n.p,{children:"Enbale ip-forwarding:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo sysctl -w net.ipv4.ip_forward=1\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create an nftables rule to handle NAT (Masquerading):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'sudo sh -c \'echo "\r\ntable ip nat {\r\n    chain postrouting {\r\n        type nat hook postrouting priority 100; policy accept;\r\n        ip saddr 192.168.10.0/24 oifname != \\"ap0\\" masquerade\r\n    }\r\n}" >> /etc/nftables.conf && sudo nft -f /etc/nftables.conf\'\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Restart ",(0,s.jsx)(n.code,{children:"dnsmasq"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo systemctl restart dnsmasq\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now you should be able to connect to the AP and use its internet connection to access the internet. (If you have a working internet connection on its client side)"}),"\n",(0,s.jsx)(n.h3,{id:"automate-the-workaround",children:"Automate the workaround"}),"\n",(0,s.jsx)(n.p,{children:"Create a new file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'sudo sh -c \'cat <<EOF > /opt/start-ap-managed-wifi.sh\r\n#!/bin/bash\r\nLOGFILE="/var/log/pi_startup.log"\r\necho "[$(date)] Starting script. Sleeping 15 sec..." >> \\$LOGFILE\r\nsleep 15\r\necho "[$(date)] Starting execution" >> \\$LOGFILE\r\nsudo sysctl -w net.ipv4.ip_forward=1\r\necho "[$(date)] Enabled IP forwarding" >> \\$LOGFILE\r\nsudo sh -c "echo \\"\r\ntable ip nat {\r\nchain postrouting {\r\n    type nat hook postrouting priority 100; policy accept;\r\n    ip saddr 192.168.10.0/24 oifname != \'ap0\' masquerade\r\n}\r\n}\\" >> /etc/nftables.conf && sudo nft -f /etc/nftables.conf"\r\necho "[$(date)] Applied nftables rules for NAT" >> \\$LOGFILE\r\nsudo systemctl restart dnsmasq\r\necho "[$(date)] Restarted dnsmasq" >> \\$LOGFILE\r\necho " " >> \\$LOGFILE\r\nEOF\r\n\r\nsudo chmod +x /opt/start-ap-managed-wifi.sh\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"Add a cronjob to run the script on boot:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo bash -c 'echo \"@reboot /opt/start-ap-managed-wifi.sh\" >> /var/spool/cron/crontabs/root'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Continue to ",(0,s.jsx)(n.a,{href:"./script",children:"script.md"})," to set up bluetooth and the script."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"These instructions are tested on Raspbian Bookworm with a Raspberry Pi Zero 2 W."})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Shoutout to ",(0,s.jsx)(n.a,{href:"https://blog.thewalr.us/2017/09/26/raspberry-pi-zero-w-simultaneous-ap-and-managed-mode-wifi/",children:"TheWalrus"})," for the original instructions. A comment under the post pointed out that the instructions depend upon if-up and if-down system which is no longer used as of Raspian Buster. You might want to visit the original post for more information."]}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"These instructions depend upon if-up and if-down system used by Raspbian Stretch version."}),"\n",(0,s.jsx)(n.p,{children:"But as of 2020, you would be using Raspbian Buster, which uses a different system, based on dhcpcd daemon. While it is technically possible to still get it working (because the ifup/ifdown system are still there), it is recommended to use systemd-networkd approach, which doesn't depend upon having to introduce udev hook."}),"\n",(0,s.jsxs)(n.p,{children:["The instructions are here: ",(0,s.jsx)(n.a,{href:"https://disq.us/url?url=https%3A%2F%2Fraspberrypi.stackexchange.com%2Fquestions%2F89803%2Faccess-point-as-wifi-router-repeater-optional-with-bridge%2F89804%2389804%3AtorAhAl318HVmaNbHEe6ej2YO6s&cuid=4278722",children:"https://raspberrypi.stackex..."})]}),"\n"]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);